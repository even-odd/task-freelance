import React, { Component } from "react";
import { connect } from 'react-redux';

import './Task.css';
import doge from '../../assets/doge.png';
import { getProperty, getTenDays, numberTest, getStrDate, prepareChangedProp } from '../../utils';
import { EProgressBar, EPriority, EStatus, ESelectType } from "../../consts/enums";
import { taskTypeActions } from "../../consts/actionTypes";

import Select from '../Select/Select';
import ProgressBar from "../ProgressBar/ProgressBar";

//TODO-advanced: –ø—Ä–∏–¥—É–º–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —É–º–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä 

// –¶–∏–∫–ª: 
// new Task -> click saveTask -> clisk Task -> new AdvancedTask ->? new SimpleTask ->? new Task ....

// –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ –≥–ª–∞–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á. 
// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ props.taskId
// props:
//  task
//  taskId? - —Å–≤–æ–±–æ–¥–Ω—ã–π Id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ 
//  moveTask - –ø–æ —Ñ–∞–∫—Ç—É –∫–æ—Å—Ç—ã–ª—å - –Ω–µ –∑–Ω–∞—é –∫–∞–∫ —Å–æ–æ–±—â–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—é –æ —Å–æ—Ö—Ä–∞–Ω–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
class Task extends Component {
    constructor(props) {
        super(props);
        // console.debug('Task.constructor - rawTask', props.task);
        this.state = {
            task: (props.task) ? props.task : this.—ÅreateNewTask(),
            saved: (props.task) ? true : false,
            errors: ''
        }
    }

    // Notice: –º–æ–∂–µ—Ç –ø–µ—Ä–µ–±–∏–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ constructor –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å Advanced –∏ Simple task
    // –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω task.taskList –¥–ª—è ProgressBar
    static getDerivedStateFromProps(nextProps, prevState) {
        console.debug('Task.getDerivedStateFromProps');
        let newState = prevState;

        //TODO-advanced: –∫–∞–∂–¥—ã–π —Ä–∞–∑, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç 
        if(nextProps.task && prevState.saved) 
            newState = {
                ...prevState,
                task: prepareTask(nextProps.task)
            };
        
        return newState;
    }

    render() {
        let { task, saved } = this.state; 
        // console.debug(`Task - `, task);
        
        let priority = getProperty('priority', task.priority,
            ['—Ö–æ—Ç–µ–ª–∫–∞', '–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', '—Å—Ä–µ–¥–Ω—è—è', '–≤–∞–∂–Ω–∞—è', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è'], ['wish', 'low', 'medium', 'important', 'crit']
        );
        let status = getProperty('status', task.status,
            ['–≤—ã–ø–æ–ª–Ω–µ–Ω–∞', '–æ–∂–∏–¥–∞–µ—Ç', '–æ—Ç–ª–æ–∂–µ–Ω–∞', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'], ['done', 'await', 'delayed', 'during']
        );

        return (
            <div className='task' onDoubleClick={ () => saved && this.props.openAdvancedTask() }>
                <div className='task__info'>
                    <div className="task__box">
                        <div className='task__props'>
                            
                            <span onDoubleClick={ this.handleEdit } className={ `task__property task__priority-${priority.class}` }>
                                { priority.title }
                            </span>
                            {!saved &&
                                <Select type={ ESelectType.Priority } 
                                    setChange={(newValue) => this.changeProp('priority', newValue)}/>
                            }
                            
                            <span onDoubleClick={ this.handleEdit } className={ `task__property task__status-${status.class}` }>
                                { status.title }
                            </span>
                            {!saved &&
                                <Select type={ ESelectType.Status } 
                                    setChange={(newValue) => this.changeProp('status', newValue)}/>
                            }

                            {/* TODO-advanced: Select Tags */}
                        </div>
                        
                        <div className="task__btn-box">
                        { !saved &&
                            <button className='task__btn-save' onClick={ this.handleSaveTask }>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                        }
                            <button className='task__btn-del' onClick={ this.deleteTask }>–£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                    </div>

                    { (saved) 
                        ? <div className='task__title' onDoubleClick={ this.handleEdit }>{task.title}</div>
                        : <input type="text" defaultValue={task.title} onBlur={(e) => this.changeProp('title', e.target.value)}/>
                    }

                    <div className="task__box_doge">
                        <div className="task__progress-bars" onDoubleClick={ this.handleEdit }>
                            <ProgressBar type={EProgressBar.CompletedTasks} task={ task }/>
                            <ProgressBar type={EProgressBar.TimeLimit} task={ task }/>
                            { !saved && 
                                <div className="task__box_edit-time">
                                    <input type='text' defaultValue={getStrDate(task.timeBegin)} className='task__edit-time-begin' 
                                        onBlur={(e) => this.changeProp('timeBegin', e.target.value)}/>   
                                    <input type='text' defaultValue={getStrDate(task.timeEnd)}  className='task__edit-time-end' 
                                        onBlur={(e) => this.changeProp('timeEnd', e.target.value)}/>   
                                </div>
                            }
                        </div>
                        {/* TODO-advance: —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–º–µ–º—ã, –º—É–∑—ã–∫–∞, —Å–º–µ–Ω–∞ —Ç–µ–º –∏ —Ç–¥) */}
                        { !saved && (Math.random() - 0.99) > 0 && <img src={doge} 
                                    className='task__doge'
                                    alt="Doge with hat" 
                                    aria-label="–ú–æ–µ —É–≤–æ–æ–æ–∂–µ–Ω–∏–µ, —Å–Ω–∏–º–∞—é –ø–µ—Ä–µ–¥ –≤–∞–º–∏ —à–ª—è–ø—É"
                                    title="–ú–æ–µ —É–≤–æ–æ–æ–∂–µ–Ω–∏–µ, —Å–Ω–∏–º–∞—é –ø–µ—Ä–µ–¥ –≤–∞–º–∏ üé©"/>
                        }
                    </div>
                </div>
            </div>
        )
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—é
    handleSaveTask = () => {
        let { saveTask, moveTask } = this.props;
        let { errors, task } = this.state;
    
        // TODO-advanced: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (–≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫), —Ö–∑ –ø–æ—á–µ–º—É —Å—Ä–∞–∑—É –Ω–µ —Å–¥–µ–ª–∞–ª 
        let handledErr = 0;
        while(errors.length > 0 && handledErr < errors.length) {
            alert(errors[handledErr]);
            if(handledErr + 1 === errors.length) {
                this.setState({
                    errors: []
                });
                return;
            }
        }
        //
    
        // TODO-ask: —É–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–∑—ã–≤–∞—Ç—å:
        //      setState, —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –Ω–∞ setState –∏ dispatch
        this.setState({
            saved: true
        });

        moveTask && moveTask();           

        saveTask(task);
        console.info(`task saved, id: ${task.id}`);
    }

    // –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—é
    deleteTask = () => {
        let { delTask, moveTask } = this.props;

        if(moveTask) { // —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
            moveTask()
        } else { // –∑–∞–¥–∞—á–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            delTask(this.state.task.id)
            // throw new Error("Err: Task.saveTask - parent function moveTask, does'n exist");
        };
    }

    // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞
    —ÅreateNewTask = () => {
        // console.debug('Task.createNewTask');
        numberTest('taskId', this.props.taskId, 'Task.—ÅreateNewTask', true);
        return {
            id: this.props.taskId,
            // type: ETaskType.Full,
            title: '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏...',
            status: EStatus.Await,
            priority: EPriority.Wish,
            executors: [],
            timeBegin: new Date(),
            timeEnd: new Date(getTenDays(Date.now())), // –±—É–¥–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º 10 –¥–Ω–µ–π (–∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–µ–Ω–∏–∏ + 10 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            description: '',
            taskList: []
        };
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    changeProp = (prop, rawValue) => {
        let newValue = prepareChangedProp(prop, rawValue);

        if(newValue.err) {
            // newValue.value - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            alert(newValue.value);
            this.setState((prevState) => {
                return {
                    errors: [...prevState.errors, newValue.value]
                }
            }); 
        } else {
            // newValue.value - –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
            this.setState((prevState) => {
                return {
                    task: {...prevState.task, [prop]: newValue.value}   
                }
            });
        }
    }

    // –¢–æ–≥–≥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è    
    handleEdit = (event) => {
        this.setState({
            saved: false
        });
        event.stopPropagation()
    }
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const prepareTask = (rawTask) => {
    if(!rawTask.timeBegin.getDate || !rawTask.timeEnd.getDate) {
        
        let updatedTask = {
            ...rawTask,
            timeBegin: new Date(rawTask.timeBegin),
            timeEnd: new Date(rawTask.timeEnd)
        };
        console.debug('Task.prepareTask - persisted task, updated: ', updatedTask);
        return updatedTask;
    }
    console.debug('Task.prepareTask - ok');
    return rawTask;
}

const mapDispatchToProps = (dispatch) => {
    return {
        saveTask: (task) => {
            dispatch({ type: taskTypeActions.SAVE_TASK, task });
        },
        delTask: (id) => {
            dispatch({ type: taskTypeActions.DEL_TASK, id });
        }
    }
}


export default connect(null, mapDispatchToProps)(Task);
